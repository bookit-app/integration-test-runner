{
	"info": {
		"_postman_id": "3a885d20-2ef2-4914-b74a-410994fcd2cc",
		"name": "bookit-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "System Tests",
			"item": [
				{
					"name": "Security Tests - No API's should be reachable within a proper JWT Token",
					"item": [
						{
							"name": "Not authorized to create a profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a892457e-bfdd-4ba4-8baa-b1ed3e0e38c0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"TEST-USER\",\n    \"gender\": \"M\",\n    \"phoneNumber\": \"123-123-1234\",\n    \"address\": {\n        \"city\": \"West Chester\",\n        \"state\": \"PA\",\n        \"streetAddress\": \"1234 High Street\",\n        \"zip\": \"12345\"\n    },\n    \"isProvider\": false,\n    \"email\": \"{{testUserEmail}}\",\n    \"birthday\": \"2000-10-10\",\n    \"lastName\": \"TEST-USER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{HOST_NAME}}/profile",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to Query for a Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{HOST_NAME}}/profile/1",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"profile",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to Update a Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gender\": \"O\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{HOST_NAME}}/profile",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to access Style Configuration data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71759c29-4287-4bef-b3cd-8a1f819ffb3c",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{HOST_NAME}}/configuration/styles",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"configuration",
										"styles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to access Staff Classification Configuration data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e5984d7-5cb1-4416-ba81-53948d7c54a0",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{HOST_NAME}}/configuration/staffClassification",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"configuration",
										"staffClassification"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to Create a Service Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Endpoint-API-UserInfo",
										"type": "text",
										"value": "ICAgIHsKICAgICAgImlzc3VlciI6ICJUT0tFTl9JU1NVRVIiLAogICAgICAiaWQiOiAiMDU3S3lpQkE1MGFYcGpqZVZYS2R5SUlrT21mMSIsCiAgICAgICJlbWFpbCIgOiAiVVNFUl9FTUFJTCIKICAgIH0="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ein\": \"99-9999999\",\n\t\"businessName\": \"Test Business\",\n\t\"email\": \"test@test.com\",\n\t\"phoneNumber\": \"123-123-1234\",\n\t\"address\": {\n\t\t\"streetAddress\": \"1234 TEST Street\",\n\t\t\"city\": \"TEST CITY\",\n\t\t\"state\": \"TC\",\n\t\t\"zip\": \"99999\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{HOST_NAME}}/provider",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to query for a service provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0513317a-3b59-4011-90ba-6a9a5f91eb2b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{HOST_NAME}}/provider/someproviderid",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"provider",
										"someproviderid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to Create a Service Provider Offering",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Test Service Offering\",\n  \"price\": 10,\n  \"currency\": \"USD\",\n  \"styleId\": \"FADE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{HOST_NAME}}/provider/someproviderid/services",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"provider",
										"someproviderid",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Not authorized to execute provider search",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{HOST_NAME}}/search/provider?zip=99999",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"search",
										"provider"
									],
									"query": [
										{
											"key": "zip",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Not Authorized to update Service Provider Offering",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"UPDATED DESCRIPTION\",\n  \"price\": 25,\n  \"currency\": \"USD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{HOST_NAME}}/provider/{{providerId}}/services/{{serviceId}}",
									"protocol": "https",
									"host": [
										"{{HOST_NAME}}"
									],
									"path": [
										"provider",
										"{{providerId}}",
										"services",
										"{{serviceId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9a68710-4279-4180-94a9-24cef2fa5d30",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bef30932-0d80-4e2d-8e24-c5969f7f42b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Integration Tests",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Create User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ad0a89fe-a028-4418-9c93-8e559f649fe2",
												"exec": [
													"var {v4} = require('uuid');",
													"pm.environment.set(\"testUserPassword\", v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "55f50383-7a9b-4ff0-a1b2-d52d6c31b8e8",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"testUserEmail\", jsonData.email);",
													"pm.environment.set(\"idToken\", jsonData.idToken);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{$randomEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key={{API-KEY}}",
											"protocol": "https",
											"host": [
												"identitytoolkit",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"accounts:signUp"
											],
											"query": [
												{
													"key": "key",
													"value": "{{API-KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Scenarios",
							"item": [
								{
									"name": "Profile",
									"item": [
										{
											"name": "User should be able to create a profile",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a892457e-bfdd-4ba4-8baa-b1ed3e0e38c0",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"firstName\": \"TEST-USER\",\n    \"gender\": \"M\",\n    \"phoneNumber\": \"123-123-1234\",\n    \"address\": {\n        \"city\": \"West Chester\",\n        \"state\": \"PA\",\n        \"streetAddress\": \"1234 High Street\",\n        \"zip\": \"12345\"\n    },\n    \"isProvider\": false,\n    \"email\": \"{{testUserEmail}}\",\n    \"birthday\": \"2000-10-10\",\n    \"lastName\": \"TEST-USER\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for a Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes the users profile\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"firstName\");",
																	"    pm.expect(data).to.include.keys(\"gender\");",
																	"    pm.expect(data).to.include.keys(\"phoneNumber\");",
																	"    pm.expect(data).to.include.keys(\"address\");",
																	"    pm.expect(data.address).to.include.keys(\"zip\");",
																	"    pm.expect(data.address).to.include.keys(\"city\");",
																	"    pm.expect(data.address).to.include.keys(\"state\");",
																	"    pm.expect(data.address).to.include.keys(\"streetAddress\");",
																	"    pm.expect(data).to.include.keys(\"isProvider\");",
																	"    pm.expect(data).to.include.keys(\"email\");",
																	"    pm.expect(data.email).to.equal(pm.environment.get(\"testUserEmail\"))",
																	"    pm.expect(data).to.include.keys(\"isSocial\");",
																	"    pm.expect(data).to.include.keys(\"birthday\");",
																	"    pm.expect(data).to.include.keys(\"lastName\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to Query their profile",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for a Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes the users profile\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"firstName\");",
																	"    pm.expect(data).to.include.keys(\"gender\");",
																	"    pm.expect(data).to.include.keys(\"phoneNumber\");",
																	"    pm.expect(data).to.include.keys(\"address\");",
																	"    pm.expect(data.address).to.include.keys(\"zip\");",
																	"    pm.expect(data.address).to.include.keys(\"city\");",
																	"    pm.expect(data.address).to.include.keys(\"state\");",
																	"    pm.expect(data.address).to.include.keys(\"streetAddress\");",
																	"    pm.expect(data).to.include.keys(\"isProvider\");",
																	"    pm.expect(data).to.include.keys(\"email\");",
																	"    pm.expect(data.email).to.equal(pm.environment.get(\"testUserEmail\"))",
																	"    pm.expect(data).to.include.keys(\"isSocial\");",
																	"    pm.expect(data).to.include.keys(\"birthday\");",
																	"    pm.expect(data).to.include.keys(\"lastName\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to update their profile",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Update a Profile Gender",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"gender\": \"O\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "Gender should be changed to O",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes updated gender\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"gender\");",
																	"    pm.expect(data.gender).to.equal(\"O\")",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update a Profile Phone Number",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"phoneNumber\": \"999-999-9999\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "Phone Number should be 999-999-9999",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes updated phone number\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"phoneNumber\");",
																	"    pm.expect(data.phoneNumber).to.equal(\"999-999-9999\")",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update a Profile Address",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"address\": {\n        \"city\": \"Palo Alto\",\n        \"state\": \"CA\",\n        \"streetAddress\": \"1234 Something Street\",\n        \"zip\": \"54321\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "Address should be updated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes updated address\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"address\");",
																	"    ",
																	"    const address = data.address;",
																	"    pm.expect(address.city).to.equal(\"Palo Alto\");",
																	"    pm.expect(address.state).to.equal(\"CA\");",
																	"    pm.expect(address.streetAddress).to.equal(\"1234 Something Street\");",
																	"    pm.expect(address.zip).to.equal(\"54321\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update birthday",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"birthday\": \"2000-05-01\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "Birthday should be updated to 2000-05-01",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes updated birthday\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"birthday\");",
																	"    pm.expect(data.birthday).to.equal(\"2000-05-01\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "User should not be able to change their email",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"something@email.com\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "User should not be able to change their name",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1daee6d6-3dd2-48ae-9cf3-8975b469f03a",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"firstName\": \"MY\",\n\t\"lastName\": \"NAME\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Provider",
									"item": [
										{
											"name": "User should be able to access provider config",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "User can access Style Configuration data",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "71759c29-4287-4bef-b3cd-8a1f819ffb3c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response should contain hairStyles\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"hairStyles\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/configuration/styles",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"configuration",
																"styles"
															]
														}
													},
													"response": []
												},
												{
													"name": "User can access Staff Classification Configuration data",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6e5984d7-5cb1-4416-ba81-53948d7c54a0",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response should contain a non-empty array of types\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"types\");",
																	"    pm.expect(data.types.length).to.be.greaterThan(0)",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/configuration/staffClassification",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"configuration",
																"staffClassification"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to create a provider",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Service Provider",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain the location header\", function () {",
																	"    const headerList = pm.response.headers;",
																	"    pm.expect(headerList.has('location'))",
																	"});",
																	"",
																	"// Populate the Proivder ID to the env. Pull from location header and split it at /provider/[1]",
																	"const headerList = pm.response.headers;",
																	"const locationHeader = headerList.get('location');",
																	"if(locationHeader){",
																	"    const providerId = locationHeader.split('/provider/')[1];",
																	"    pm.environment.set(\"providerId\", providerId);",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-Endpoint-API-UserInfo",
																"value": "ICAgIHsKICAgICAgImlzc3VlciI6ICJUT0tFTl9JU1NVRVIiLAogICAgICAiaWQiOiAiMDU3S3lpQkE1MGFYcGpqZVZYS2R5SUlrT21mMSIsCiAgICAgICJlbWFpbCIgOiAiVVNFUl9FTUFJTCIKICAgIH0=",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"ein\": \"99-9999999\",\n\t\"businessName\": \"Test Business\",\n\t\"email\": \"test@test.com\",\n\t\"phoneNumber\": \"123-123-1234\",\n\t\"address\": {\n\t\t\"streetAddress\": \"1234 TEST Street\",\n\t\t\"city\": \"TEST CITY\",\n\t\t\"state\": \"TC\",\n\t\t\"zip\": \"99999\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/provider",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider"
															]
														}
													},
													"response": []
												},
												{
													"name": "Find the provider which was just created",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0513317a-3b59-4011-90ba-6a9a5f91eb2b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes the provider information\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"ein\");",
																	"    pm.expect(data.ein).to.equal('99-9999999')",
																	"    pm.expect(data).to.include.keys(\"businessName\");",
																	"    pm.expect(data).to.include.keys(\"email\");",
																	"    pm.expect(data).to.include.keys(\"address\");",
																	"    pm.expect(data.address).to.include.keys(\"zip\");",
																	"    pm.expect(data.address).to.include.keys(\"city\");",
																	"    pm.expect(data.address).to.include.keys(\"state\");",
																	"    pm.expect(data.address).to.include.keys(\"streetAddress\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "User profile should have isProvider = true",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response should have profile with isProvider === true\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"isProvider\");",
																	"    pm.expect(data.isProvider).to.be.true;",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "1d526c3f-dd31-4e35-aa35-d27656f8d442",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should not be able to create a provider with the same EIN code",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Service Provider should fail",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test('Error code should be MALFORMED_REQUEST', function () {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.errorCode).to.equal('MALFORMED_REQUEST');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-Endpoint-API-UserInfo",
																"value": "ICAgIHsKICAgICAgImlzc3VlciI6ICJUT0tFTl9JU1NVRVIiLAogICAgICAiaWQiOiAiMDU3S3lpQkE1MGFYcGpqZVZYS2R5SUlrT21mMSIsCiAgICAgICJlbWFpbCIgOiAiVVNFUl9FTUFJTCIKICAgIH0=",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"ein\": \"99-9999999\",\n\t\"businessName\": \"Test Business\",\n\t\"email\": \"test@test.com\",\n\t\"phoneNumber\": \"123-123-1234\",\n\t\"address\": {\n\t\t\"streetAddress\": \"1234 TEST Street\",\n\t\t\"city\": \"TEST CITY\",\n\t\t\"state\": \"TC\",\n\t\t\"zip\": \"99999\"\n\t}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/provider",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "975fc452-ae53-4b8c-9b5b-2baa9d8554ab",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "03373474-13b4-49e4-a7b2-4c82bfb5a022",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to create service offerings on the provider",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Service Provider Offering FADE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain the location header\", function () {",
																	"    const headerList = pm.response.headers;",
																	"    pm.expect(headerList.has('location'))",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"description\": \"Test Service Offering\",\n  \"price\": 5,\n  \"currency\": \"USD\",\n  \"styleId\": \"FADE\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}/services",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}",
																"services"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Service Provider Offering UPDO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain the location header\", function () {",
																	"    const headerList = pm.response.headers;",
																	"    pm.expect(headerList.has('location'))",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"description\": \"Test Service Offering\",\n  \"price\": 20,\n  \"currency\": \"USD\",\n  \"styleId\": \"UPDO\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}/services",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}",
																"services"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Service Provider Offering CUSTOM",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});",
																	"",
																	"pm.test(\"Response should contain the location header\", function () {",
																	"    const headerList = pm.response.headers;",
																	"    pm.expect(headerList.has('location'))",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"description\": \"Test Service Offering\",\n  \"price\": 75,\n  \"currency\": \"USD\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}/services",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}",
																"services"
															]
														}
													},
													"response": []
												},
												{
													"name": "Verify Offerings are created and returned with provider",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should have 3 services', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data).to.include.keys(\"services\");",
																	"   pm.expect(data.services.length).to.equal(3);",
																	"   pm.expect(data.services.find((item)=>item.styleId === 'FADE')).to.not.be.undefined;",
																	"   pm.expect(data.services.find((item)=>item.styleId === 'UPDO')).to.not.be.undefined;",
																	"   pm.expect(data.services.find((item)=>item.styleId === 'CUSTOM')).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a4177ab-4ec1-44f0-a5f3-0a0907f075ef",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b3d346b3-ceab-4921-bee3-b0018813d0ea",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to search for and find the provider created",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by zip code",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?zip=99999",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "zip",
																	"value": "99999"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by state",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by city",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?city=TEST CITY",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "city",
																	"value": "TEST CITY"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by business name",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?businessName=Test Business",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "businessName",
																	"value": "Test Business"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by styles = FADE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?styles=FADE",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "styles",
																	"value": "FADE"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by styles = UPDO",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?styles=UPDO",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "styles",
																	"value": "UPDO"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by combination",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&city=TEST CITY&styles=FADE",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "city",
																	"value": "TEST CITY"
																},
																{
																	"key": "styles",
																	"value": "FADE"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by combination but not find the created provider",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((item)=>item.providerId === pm.environment.get(\"providerId\"))).to.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=PA&city=West Chester",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "PA"
																},
																{
																	"key": "city",
																	"value": "West Chester"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $ - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have offerings in the $ price range and 2 others', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$');",
																	"   pm.expect(provider.priceRanges.length).to.equal(3)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "cb09dde4-d94c-497c-a928-08d1fd4fd923",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $$ - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have offerings in the $$ price range and 2 others', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$$');",
																	"   pm.expect(provider.priceRanges.length).to.equal(3)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "1ea4cf48-70e2-4c8e-a193-3b99f73b56d6",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$$",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$$"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $$$ - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should not have and offerings in the $$$ price range', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.not.include('$$$');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b216102d-94bd-4a19-871f-3173fa4f2ea1",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$$$",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$$$"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $$$$ - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have and offerings in the $$$$ price range', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$$$$');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "6c986db0-9429-4993-9841-24eb55d52feb",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$$$$",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$$$$"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $ and Style = FADE - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have offerings in the $ price range for FADE and no others', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$');",
																	"   pm.expect(provider.priceRanges.length).to.equal(1)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "6874b25b-709b-4cb2-b2d5-1afd2514643c",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$&styles=FADE",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$"
																},
																{
																	"key": "styles",
																	"value": "FADE"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $ and Style = UPDO - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should not be found because there are no UPDO styles in the price range', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.be.undefined;",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "11245369-98f7-4779-9b6b-7326a9284a3d",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$&styles=UPDO",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$"
																},
																{
																	"key": "styles",
																	"value": "UPDO"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $$ and Style = FADE - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have offerings in the $ price range for FADE', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$');",
																	"   pm.expect(provider.priceRanges.length).to.equal(1)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "043f898e-50fe-48fe-8751-cdbaf88a6e78",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$$&styles=FADE",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$$"
																},
																{
																	"key": "styles",
																	"value": "FADE"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $$ and Style = UPDO - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have offerings in the $$ price range for UPDO', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$$');",
																	"   pm.expect(provider.priceRanges.length).to.equal(1)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "11034273-385c-48cd-aeb3-f04163fe6cf1",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$$&styles=UPDO",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$$"
																},
																{
																	"key": "styles",
																	"value": "UPDO"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0a884258-a356-42d9-961d-d8285eae5b5d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "540319c6-ef4e-4b91-a50f-0f04e8fa06bd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to update service offerings",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Load the FADE service",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should have a FADE service', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data).to.include.keys(\"services\");",
																	"   pm.expect(data.services.find((item)=>item.styleId === 'FADE')).to.not.be.undefined;",
																	"});",
																	"",
																	"const fade = pm.response.json().services.find((item)=>item.styleId === 'FADE');",
																	"pm.environment.set(\"serviceId\", fade.serviceId);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Service Provider Offering",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "511b7e50-51e5-48f0-8c1c-829dd38ec6a1",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"description\": \"UPDATED DESCRIPTION\",\n  \"price\": 25,\n  \"currency\": \"USD\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}/services/{{serviceId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}",
																"services",
																"{{serviceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Verify Service Offering has been updated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should have a FADE service', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data).to.include.keys(\"services\");",
																	"   ",
																	"   const fade = data.services.find((item)=>item.styleId === 'FADE');",
																	"   pm.expect(fade).to.not.be.undefined;",
																	"   pm.expect(fade.description).to.equal(\"UPDATED DESCRIPTION\");",
																	"   pm.expect(fade.price).to.equal(25);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $ and Style = FADE - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should not be found as FADE price range has increased', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.be.undefined;",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e98ed171-ca45-488d-9d8c-6c267b9373f3",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$&styles=FADE",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$"
																},
																{
																	"key": "styles",
																	"value": "FADE"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Search by price range $$ and Style = FADE - State is also set to make sure we get expected results",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6480cfc9-76c3-420b-9aa2-35f81b133f70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Provider should be found as FADE is now within the price range', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"});",
																	"",
																	"pm.test('Provider should have offerings in the $$ price range for FADE', () => {",
																	"   const data = pm.response.json();",
																	"   const provider = data.find((item)=>item.providerId === pm.environment.get(\"providerId\"));",
																	"   pm.expect(provider).to.not.be.undefined;",
																	"   pm.expect(provider.priceRanges).to.include('$$');",
																	"   pm.expect(provider.priceRanges.length).to.equal(1)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "81c208f4-8d56-4224-bb7b-c71dbce5c4a4",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/search/provider?state=TC&priceRange=$$&styles=FADE",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"search",
																"provider"
															],
															"query": [
																{
																	"key": "state",
																	"value": "TC"
																},
																{
																	"key": "priceRange",
																	"value": "$$"
																},
																{
																	"key": "styles",
																	"value": "FADE"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to create a Staff Membership Request",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Staff Member User",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ad0a89fe-a028-4418-9c93-8e559f649fe2",
																"exec": [
																	"var {v4} = require('uuid');",
																	"pm.environment.set(\"testStaffMemberUserPassword\", v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "55f50383-7a9b-4ff0-a1b2-d52d6c31b8e8",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"testStaffMemberUserEmail\", jsonData.email);",
																	"pm.environment.set(\"staffMemberIdToken\", jsonData.idToken);",
																	"pm.environment.set(\"staffMemberUserId\", jsonData.localId)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{$randomEmail}}\",\n\t\"password\": \"{{testStaffMemberUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signUp"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create a Profile for Staff Member",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a892457e-bfdd-4ba4-8baa-b1ed3e0e38c0",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{staffMemberIdToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"firstName\": \"TEST-STAFF-MEMBER-USER\",\n    \"gender\": \"M\",\n    \"phoneNumber\": \"123-123-1234\",\n    \"address\": {\n        \"city\": \"West Chester\",\n        \"state\": \"PA\",\n        \"streetAddress\": \"1234 High Street\",\n        \"zip\": \"12345\"\n    },\n    \"isProvider\": false,\n    \"email\": \"{{testStaffMemberUserEmail}}\",\n    \"birthday\": \"2000-10-10\",\n    \"lastName\": \"TEST-USER\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/profile",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Staff Membership Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 201\", function () {",
																	"    pm.response.to.have.status(201);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"requestedStaffMemberEmail\": \"{{testStaffMemberUserEmail}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/staffMembershipRequest",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"staffMembershipRequest"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Requested Staff Member should find their open request",
											"item": [
												{
													"name": "Access Token for Staff Member",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testStaffMemberUserEmail}}\",\n\t\"password\": \"{{testStaffMemberUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for Staff Membership Requests",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Staff membership request should be found', () => {",
																	"   const data = pm.response.json();",
																	"   pm.expect(data.find((request) => request.providerId === pm.environment.get(\"providerId\") && request.requestedStaffMemberEmail === pm.environment.get(\"testStaffMemberUserEmail\") && request.status === \"NEW\")).to.not.be.undefined;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{staffMemberIdToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/staffMembershipRequest",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"staffMembershipRequest"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Staff Member should be able to accept the membership request to join the providers team",
											"item": [
												{
													"name": "Access Token for Staff Member",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"staffMemberIdToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testStaffMemberUserEmail}}\",\n\t\"password\": \"{{testStaffMemberUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for Staff Membership Requests",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test('Staff membership request should be found', () => {",
																	"   const data = pm.response.json();",
																	"   const request = data.find((request) => request.providerId === pm.environment.get(\"providerId\") && request.requestedStaffMemberEmail === pm.environment.get(\"testStaffMemberUserEmail\") && request.status === \"NEW\");",
																	"   pm.expect(request).to.not.be.undefined;",
																	"   pm.environment.set(\"staffMembershiptRequestId\", request.id);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{staffMemberIdToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "https://{{HOST_NAME}}/staffMembershipRequest",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"staffMembershipRequest"
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept Staff memberhip request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5d13f304-6ce7-4d60-9b1b-dce6a6b2d35c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{staffMemberIdToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"status\": \"ACCEPTED\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{HOST_NAME}}/staffMembershipRequest/{{staffMembershiptRequestId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"staffMembershipRequest",
																"{{staffMembershiptRequestId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Verify Staff member is associated with Service Provider",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0513317a-3b59-4011-90ba-6a9a5f91eb2b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response includes the staff member information\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data.staff.length).gt(0);",
																	"    pm.expect(data.staff.find(member => member.staffMemberId === pm.environment.get(\"staffMemberUserId\") && member.email === pm.environment.get(\"testStaffMemberUserEmail\")));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "df5fd494-b528-4d23-9b1a-1d418d2a46b4",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User should be able to delete the provider",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"idToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "User can delete the service provider",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "71759c29-4287-4bef-b3cd-8a1f819ffb3c",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Provider should not longer exist",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0513317a-3b59-4011-90ba-6a9a5f91eb2b",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/provider/{{providerId}}",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"provider",
																"{{providerId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "User profile should have isProvider = false",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "38a628d5-03fd-48f3-9c1b-ea7a63887154",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Response should have profile with isProvider === false\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data).to.include.keys(\"isProvider\");",
																	"    pm.expect(data.isProvider).to.be.false;",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "02972d07-3c8d-4a9e-a0af-dc713fdde09d",
																"exec": [
																	"setTimeout(() => {",
																	"    console.log(\"Timeout exceeded attempting request\")",
																	"}, 15000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{idToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Delete Staff Member Information",
											"item": [
												{
													"name": "Access Token for Staff Member",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"staffMemberIdToken\", jsonData.idToken);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testStaffMemberUserEmail}}\",\n\t\"password\": \"{{testStaffMemberUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "93cddacd-e3bd-4c14-b27c-0a14b38b119d",
																"exec": [
																	"pm.test(\"Status code is 204\", function () {",
																	"    pm.response.to.have.status(204);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{staffMemberIdToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "https://{{HOST_NAME}}/profile/1",
															"protocol": "https",
															"host": [
																"{{HOST_NAME}}"
															],
															"path": [
																"profile",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete User",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0ce2339b-0138-4da2-ad90-34f89a8b03dd",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"idToken\": \"{{staffMemberIdToken}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:delete?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:delete"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Verify User cannot get a new token",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Error code should me EMAIL_NOT_FOUND\", function () {",
																	"    const data = pm.response.json();",
																	"    pm.expect(data.error.message).to.equal('EMAIL_NOT_FOUND')",
																	"});",
																	"",
																	"pm.environment.set(\"staffMemberUserId\", '');",
																	"pm.environment.set(\"staffMembershiptRequestId\", '');",
																	"pm.environment.set(\"testStaffMemberUserEmail\", '');",
																	"pm.environment.set(\"staffMemberIdToken\", '');",
																	"pm.environment.set(\"testStaffMemberUserPassword\", '');"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"email\": \"{{testStaffMemberUserEmail}}\",\n\t\"password\": \"{{testStaffMemberUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
															"protocol": "https",
															"host": [
																"identitytoolkit",
																"googleapis",
																"com"
															],
															"path": [
																"v1",
																"accounts:signInWithPassword"
															],
															"query": [
																{
																	"key": "key",
																	"value": "{{API-KEY}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Teardown",
							"item": [
								{
									"name": "Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"idToken\", jsonData.idToken);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
											"protocol": "https",
											"host": [
												"identitytoolkit",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"accounts:signInWithPassword"
											],
											"query": [
												{
													"key": "key",
													"value": "{{API-KEY}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93cddacd-e3bd-4c14-b27c-0a14b38b119d",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{idToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://{{HOST_NAME}}/profile/1",
											"protocol": "https",
											"host": [
												"{{HOST_NAME}}"
											],
											"path": [
												"profile",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ce2339b-0138-4da2-ad90-34f89a8b03dd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"idToken\": \"{{idToken}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://identitytoolkit.googleapis.com/v1/accounts:delete?key={{API-KEY}}",
											"protocol": "https",
											"host": [
												"identitytoolkit",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"accounts:delete"
											],
											"query": [
												{
													"key": "key",
													"value": "{{API-KEY}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify User cannot get a new token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48828a88-d728-4af9-b812-bb9cbe6a79a2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code should me EMAIL_NOT_FOUND\", function () {",
													"    const data = pm.response.json();",
													"    pm.expect(data.error.message).to.equal('EMAIL_NOT_FOUND')",
													"});",
													"",
													"pm.environment.set(\"idToken\", '');",
													"pm.environment.set(\"testUserEmail\", '');",
													"pm.environment.set(\"testUserPassword\", '');"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"email\": \"{{testUserEmail}}\",\n\t\"password\": \"{{testUserPassword}}\",\n\t\"returnSecureToken\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={{API-KEY}}",
											"protocol": "https",
											"host": [
												"identitytoolkit",
												"googleapis",
												"com"
											],
											"path": [
												"v1",
												"accounts:signInWithPassword"
											],
											"query": [
												{
													"key": "key",
													"value": "{{API-KEY}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d752bf72-52ab-4186-b548-3b955cb4bf5a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d28facee-077f-4baa-bd96-385aac9a9646",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}